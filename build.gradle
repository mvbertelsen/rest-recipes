apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile 'log4j:log4j:1.2.7'
    compile 'org.slf4j:slf4j-log4j12:1.6.6'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.12'
	compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.12'
	compile 'org.codehaus.groovy:groovy-all:2.3.6'
    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.unitils:unitils-core:3.3'
}

test {
    exclude "api/**"
}

configurations {
    functionalCompile.extendsFrom testCompile
    functionalRuntime.extendsFrom testRuntime
}

sourceSets {
    functional {
        // this is so the functional tests can use the same resource classes as the app
        compileClasspath += main.output
        runtimeClasspath += main.output
        groovy {
            srcDir 'src/functional/groovy'
        }
    }
}

task functional(type: Test) {
    testClassesDir = sourceSets.functional.output.classesDir
    classpath = sourceSets.functional.runtimeClasspath
}

jettyRun.daemon = true
[jettyRun, jettyStop]*.stopPort = 8090
[jettyRun, jettyStop]*.stopKey = 'arglebargle'

functional.dependsOn jettyRun
functional.finalizedBy jettyStop

// need a way to start the server and have it wait since the default is daemon for functional
task startServer(dependsOn: classes) << {
    jettyRun.daemon = false
    jettyRun.execute()
}
